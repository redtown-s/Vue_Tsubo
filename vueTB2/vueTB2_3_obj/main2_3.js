// 100個のボールが画面内を飛び跳ねるjsを作る

// プロパティを持つオブジェクト
// 元の書式
let ball = { x: 10, y: 50 };

// 改行とインデントで見やすく表示
let ball = {
  x: 10,
  y: 50
};

// 座標をブラウザのコンソールに表示
console.log(ball.x); // =>10が出力される
console.log(ball.y); // =>50が出力される

////////////////////////////////////////////////////////////////////
// オブジェクトの階層化
// 元の書式
let ball = { pos: { x: 10, y: 50 } };

// 改行とインデントで見やすく表示
let ball = {
  pos: {
    x: 10,
    y: 50
  }
};

// 座標をブラウザのコンソールに表示
console.log(ball.pos.x); // =>10が出力される
console.log(ball.pos.y); // =>50が出力される

// 上記のように、オブジェクトを使う側のプログラムからは、「ボール.座標.X成分」のように階層化すると可読性が向上する

////////////////////////////////////////////////////////////////////
// リスト6 ボールオブジェクトに、ボールを移動させるメソッドを追加する
let ball = {
  pos: {
    x: 10,
    y: 50
  },
  move: function (x, y) {
    this.pos.x += x;
    this.pos.y += y;
  }
}
// 座標をブラウザのコンソールに出力
console.log(ball.pos.x); // =>10が出力される
console.log(ball.pos.y); // =>50が出力される
// ボールをx方向に5、y方向に3動かす
ball.move(5, 3);
// 座標をブラウザのコンソールに出力する
console.log(ball.pos.x); // =>15が出力される
console.log(ball.pos.y); // =>53が出力される


////////////////////////////////////////////////////////////////////
// リスト7,8 Movableクラスからインスタンスを生成する
// 「動くモノ」クラスの定義
let Movable = function (x, y) {
  this.pos = {
    x: x,
    y: y
  };
  this.move = function (x, y) {
    this.pos.x += x;
    this.pos.y += y;
  };
}
// ボールのインスタンスを生成する
let ball = new Movable(10, 50); // =>最初の座標値を指定
// ボールをx方向に5、y方向に3動かす
ball.move(5, 3);
// 座標をブラウザのコンソールに出力する
console.log(ball.pos.x); // 15
console.log(ball.pos.y); // 53

////////////////////////////////////////////////////////////////////
// リスト9 Movableクラスからインスタンスを生成する
// ブラウザの画面のランダムな位置に100個のボールを描画する
// ボールは<div>●</div>で表現し、CSSでオブジェクトのプロパティと結びつける

// 「動くモノ」クラスの定義
let Movable = function (x, y) {
  this.pos = {
    x: x,
    y: y
  };
  this.move = function (x, y) {
    this.pos.x += x;
    this.pos.y += y;
  };
}
// ボールオブジェクトを格納する空の配列を用意する
let ball = [];
// 100個分の繰り返し
for (let i = 0; i <= 100; i++) {
  // ボールオブジェクトのインスタンスを生成する
  ball[i] = new Movable(
    Math.floor(Math.ramdom() * window.innerWidth),
    Math.floor(Math.ramdom() * window.innerHeight)
  );
}
// ボールをブラウザに描画する
// Document インターフェイスはブラウザーに読み込まれたウェブページを表し、 DOM ツリーであるウェブページのコンテンツへのエントリーポイントとして働きます。
// DOM ツリーは <body> や <table> など、多数の要素を持ちます。これはページの URL を取得したり文書で新たな要素を作成するなど、文書全体に関わる機能を提供します。

for (let i = 0; i <= 100; i++) {
  // style="top:**px; left:**px;"
  document.write('<div class="ball" style="top:' + ball[i].pos.y + 'px; left:' + ball[i].pos.x + 'px; ">●</div>');
}



////////////////////////////////////////////////////////////////////
// データを全部バラバラに定義する
// 現実的ではない
// let x1, x2, x3, ...x1., x100;  // x座標
// let y1, y2, y3, ...y1., y100;  // y座標
// let sx1, sx2, sx3, ...sx1., sx100;  // 速度のx成分
// let sy1, sy2, sy3, ...sy1., sy100;  // 速度のy成分

// // データを配列で定義する
// // 可読性に問題あり
// // 変数を増やす際に名前の重複を避けるため、名前の規則が増え、管理が難しくなっていく
// let x = [], y = [] , sx = [], sy []; // 座標と速度

// // モノの種類だけ変数が必要になる
// let ball_x = [], ball_y = [], ball_sx = [], ball_sy =[]; //ボールの座標と速度
// let ball_color = [], ball_size = []; //ボールの色とサイズ
// let car_x = [], car_y = [],car_sx =[], car_sy =[]; //自動車の座標と速度
// let car_maker = [], car_number =[]; //自動車のメーカーとナンバー
// // ...どんどん増えていく。。。

// jsもオブジェクト表記を使えば、オブジェクトが持つプロパティやメソッドを1つの変数で扱えるようになり、コードがスッキリする


